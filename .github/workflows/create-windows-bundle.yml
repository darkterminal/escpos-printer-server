name: Build Windows Bundle

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    env:
      RELEASE_DIR: release-assets
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare release dir
        run: |
          rm -rf $RELEASE_DIR
          mkdir -p $RELEASE_DIR

      - name: Download nssm (2.24)
        run: |
          NSSM_URL="https://nssm.cc/release/nssm-2.24.zip"
          curl -L -o /tmp/nssm.zip "$NSSM_URL"
          unzip -q /tmp/nssm.zip -d /tmp/nssm_unpack
          # Find nssm.exe (both x86/x64 possible paths) and copy
          find /tmp/nssm_unpack -type f -iname "nssm.exe" -exec cp {} $RELEASE_DIR/ \;
          ls -la $RELEASE_DIR || true

      - name: Download latest PHP 8.4 x64 build (automatic detection)
        shell: bash
        run: |
          # Fetch available release listing and choose the latest php-8.4.*-Win32-vs*-x64.zip
          LISTING="$(curl -s https://windows.php.net/downloads/releases/)"
          # extract candidate filenames, sort by version, pick last
          PHP_ZIP=$(echo "$LISTING" \
            | egrep -o 'php-8\.4\.[0-9]+-Win32-vs1[67]-x64\.zip' \
            | sort -V \
            | tail -n1)
          if [ -z "$PHP_ZIP" ]; then
            echo "ERROR: Could not determine PHP 8.4 x64 filename from windows.php.net. Falling back to explicit filename (adjust if necessary)."
            # fallback: specify a known filename - change if newer patch desired
            PHP_ZIP="php-8.4.13-Win32-vs17-x64.zip"
          fi
          echo "Selected PHP package: $PHP_ZIP"
          curl -L -o /tmp/php8.4.zip "https://windows.php.net/downloads/releases/$PHP_ZIP"
          unzip -q /tmp/php8.4.zip -d /tmp/php_unpack
          # Put entire php folder (so php.exe + dlls) under release dir/php/
          mkdir -p $RELEASE_DIR/php
          # php distribution usually extracts to a folder named like php-8.4.x-Win32-vs17-x64 or directly contains php.exe
          # copy contents into release dir
          cp -r /tmp/php_unpack/* $RELEASE_DIR/php/ || true
          ls -la $RELEASE_DIR/php | sed -n '1,200p' || true

      - name: Add eps.phar (from repo)
        run: |
          if [ ! -f bin/eps.phar ]; then
            echo "ERROR: bin/eps.phar not found in repository. Ensure file exists."
            exit 1
          fi
          cp bin/eps.phar $RELEASE_DIR/

      - name: Create Windows service installer BAT
        run: |
          cat > $RELEASE_DIR/install-eps-service.bat <<'BAT'
          @echo off
          REM install-eps-service.bat
          REM This script installs eps.phar as a Windows service using nssm.exe
          SETLOCAL

          set "SVCNAME=eps"
          set "BASEDIR=%~dp0"
          REM Path to nssm.exe (expected in same folder as this .bat)
          set "NSSM=%BASEDIR%nssm.exe"
          REM Use the PHP binary included in the package (under php\)
          set "PHP=%BASEDIR%php\php.exe"
          set "EPS=%BASEDIR%eps.phar"

          if not exist "%NSSM%" (
            echo nssm.exe not found in %BASEDIR%
            exit /b 1
          )
          if not exist "%PHP%" (
            echo php.exe not found in %BASEDIR%php\ - make sure PHP was unpacked here.
            exit /b 2
          )
          if not exist "%EPS%" (
            echo eps.phar not found in %BASEDIR%
            exit /b 3
          )

          REM Install service: executable is php.exe, parameter is the phar file
          "%NSSM%" install "%SVCNAME%" "%PHP%" "%EPS%"

          REM Set working dir so relative files inside eps.phar can work
          "%NSSM%" set "%SVCNAME%" AppDirectory "%BASEDIR%"
          REM Optionally set AppParameters (if you need flags, e.g. -d some.ini)
          REM "%NSSM%" set "%SVCNAME%" AppParameters "-d phar.require_hash=0 %EPS%"

          REM Start the service
          "%NSSM%" start "%SVCNAME%"

          echo Service "%SVCNAME%" installed (or configured). Use nssm.exe to manage it.
          ENDLOCAL
          BAT

      - name: Package release assets
        run: |
          ZIP_NAME=eps-windows-bundle.zip
          cd $RELEASE_DIR
          zip -r ../$ZIP_NAME ./*
          cd ..
          ls -lh $ZIP_NAME

      - name: Create GitHub Release (if tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Windows release assets (nssm, PHP 8.4, eps.phar, installer .bat)"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release asset (zip)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./eps-windows-bundle.zip
          asset_name: eps-windows-bundle.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Save zip as workflow artifact (fallback for manual runs)
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v4
        with:
          name: eps-windows-bundle
          path: eps-windows-bundle.zip
