name: Build & Release Bundle

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      RELEASE_DIR: eps-windows-bundle
      NSSM_URL: https://nssm.cc/release/nssm-2.24.zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Setup PHP environment ---
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: intl, sockets, openssl
          coverage: none

      - name: Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader

      # --- Build PHAR binary ---
      - name: Build PHAR binary
        run: |
          composer global require humbug/box
          composer run create:phar
          ls -la bin/

      # --- Prepare release directory ---
      - name: Prepare release directory
        run: |
          rm -rf "$RELEASE_DIR"
          mkdir -p "$RELEASE_DIR"

      # --- Download and include NSSM ---
      - name: Download and extract NSSM
        run: |
          curl -L -o /tmp/nssm.zip "$NSSM_URL"
          unzip -q /tmp/nssm.zip -d /tmp/nssm_unpack
          find /tmp/nssm_unpack -type f -iname "nssm.exe" -exec cp {} "$RELEASE_DIR/" \;

      # --- Find latest PHP 8.4 Windows build ---
      - name: Find latest PHP 8.4 Windows build
        id: php
        run: |
          LISTING="$(curl -s https://windows.php.net/downloads/releases/)"
          PHP_ZIP=$(echo "$LISTING" | egrep -o 'php-8\.4\.[0-9]+-Win32-vs1[67]-x64\.zip' | sort -V | tail -n1)
          if [ -z "$PHP_ZIP" ]; then
              PHP_ZIP="php-8.4.13-Win32-vs17-x64.zip"
          fi
          echo "php_zip=$PHP_ZIP" >> $GITHUB_OUTPUT

      # --- Download & unpack PHP for Windows ---
      - name: Download and unpack PHP (Windows build)
        run: |
          curl -L -o /tmp/php.zip "https://windows.php.net/downloads/releases/${{ steps.php.outputs.php_zip }}"
          unzip -q /tmp/php.zip -d /tmp/php_unpack
          mkdir -p "$RELEASE_DIR/php"
          cp -r /tmp/php_unpack/* "$RELEASE_DIR/php/"
          cp "$RELEASE_DIR/php/php.ini-production" "$RELEASE_DIR/php/php.ini"
          {
            echo "extension=intl"
            echo "extension=sockets"
            echo "extension=openssl"
            echo "extension_dir=ext"
          } >> "$RELEASE_DIR/php/php.ini"

      # --- Copy project files into bundle ---
      - name: Copy application files
        run: |
          mkdir -p "$RELEASE_DIR/config" "$RELEASE_DIR/src"
          cp -r config/ "$RELEASE_DIR/config/"
          cp -r src/ "$RELEASE_DIR/src/"
          cp composer.json "$RELEASE_DIR/composer.json"
          cp eps "$RELEASE_DIR/eps"
          cp bin/eps.phar "$RELEASE_DIR/eps.phar"
          cp scripts/eps-install.bat "$RELEASE_DIR/eps-install.bat"
          cp scripts/eps-uninstall.bat "$RELEASE_DIR/eps-uninstall.bat"
          cp -r vendor "$RELEASE_DIR/vendor"

      # --- Generate ZIP filenames ---
      - name: Define ZIP filenames
        id: names
        run: |
          TAG_NAME="${GITHUB_REF_NAME:-manual}"
          DATE=$(date +%Y%m%d)
          ZIP_WINDOWS="eps-windows-bundle-${TAG_NAME}-${DATE}.zip"
          ZIP_PHAR="eps-unix-bundle-${TAG_NAME}-${DATE}.zip"
          echo "zip_windows=$ZIP_WINDOWS" >> $GITHUB_OUTPUT
          echo "zip_phar=$ZIP_PHAR" >> $GITHUB_OUTPUT

      # --- Compress Windows bundle ---
      - name: Create Windows ZIP bundle
        run: |
          cd "$RELEASE_DIR"
          zip -r9 "../${{ steps.names.outputs.zip_windows }}" .
          cd ..

      # --- Compress standalone PHAR ---
      - name: Create standalone PHAR ZIP
        run: |
          mkdir -p dist
          cp bin/eps.phar dist/
          cd dist
          zip -r9 "../${{ steps.names.outputs.zip_phar }}" eps.phar
          cd ..

      # --- Upload artifacts to GitHub Release ---
      - name: Upload ZIP files to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.names.outputs.zip_windows }}
            ${{ steps.names.outputs.zip_phar }}
